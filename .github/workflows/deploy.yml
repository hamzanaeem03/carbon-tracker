name: Multi-Branch CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: carbon-tracker-backend

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:6
        options: >-
          --health-cmd mongosh
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Run linter
      working-directory: ./backend
      run: npm run lint

    - name: Run tests
      working-directory: ./backend
      run: npm test -- --coverage --coverageReporters=lcov
      env:
        NODE_ENV: test
        MONGO_URI: mongodb://localhost:27017/carbon_test

    - name: Generate test report
      working-directory: ./backend
      run: |
        mkdir -p reports
        npx jest --coverage --coverageDirectory=reports/coverage
        npx eslint . -f json -o reports/eslint-report.json || true

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ci-reports
        path: backend/reports/

    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const coverage = fs.readFileSync('./backend/reports/coverage/coverage-summary.json', 'utf8');
          const data = JSON.parse(coverage);
          const total = data.total;
          const comment = `
          ## Test Coverage Report
          - **Statements**: ${total.statements.pct}%
          - **Branches**: ${total.branches.pct}%
          - **Functions**: ${total.functions.pct}%
          - **Lines**: ${total.lines.pct}%
          `;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  build_docker_dev:
    name: Build Docker Image (Dev)
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      working-directory: ./backend
      run: |
        docker build -t carbon-tracker-backend:dev-${{ github.sha }} .
        echo "Docker image built: carbon-tracker-backend:dev-${{ github.sha }}"

    - name: Run Docker container test
      run: |
        docker run --rm carbon-tracker-backend:dev-${{ github.sha }} node -e "console.log('Docker image is valid')"

    - name: Dev deployment notification
      run: |
        echo "Dev branch deployment completed"
        echo "Docker image ready: carbon-tracker-backend:dev-${{ github.sha }}"
        echo "For deployment, push to main branch"

  build_and_deploy_prod:
    name: Build Docker & Deploy to AWS (Production)
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      working-directory: ./backend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Deploy to EC2 (Production)
      env:
        IMAGE_TAG: ${{ github.sha }}
        INSTANCE_ID: ${{ secrets.PROD_INSTANCE_ID }}
      run: |
        aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --parameters "commands=[
            'cd /home/ec2-user/carbon-tracker',
            'aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com',
            'docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/carbon-tracker-backend:$IMAGE_TAG',
            'docker stop carbon-tracker-prod || true',
            'docker rm carbon-tracker-prod || true',
            'docker run -d --name carbon-tracker-prod --restart always -p 4000:4000 --env-file .env.production ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/carbon-tracker-backend:$IMAGE_TAG'
          ]" \
          --instance-ids "$INSTANCE_ID"

    - name: Verify deployment
      run: |
        echo "Production deployment initiated"
        echo "Docker image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/carbon-tracker-backend:${{ github.sha }}"
        echo "EC2 Instance: ${{ secrets.PROD_INSTANCE_ID }}"
        echo "Check EC2 instance logs: docker logs carbon-tracker-prod"

    - name: Send Production notification
      if: success()
      run: |
        echo "Production Deployment Successful"
        echo "Environment: Production"
        echo "Branch: main"
        echo "Version: ${{ github.sha }}"