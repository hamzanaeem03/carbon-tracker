name: Multi-Branch CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:6
        options: >-
          --health-cmd mongosh
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Run linter
      working-directory: ./backend
      run: npm run lint

    - name: Run tests
      working-directory: ./backend
      run: npm test -- --coverage --coverageReporters=lcov
      env:
        NODE_ENV: test
        MONGO_URI: mongodb://localhost:27017/carbon_test

    - name: Generate test report
      working-directory: ./backend
      run: |
        mkdir -p reports
        npx jest --coverage --coverageDirectory=reports/coverage
        npx eslint . -f json -o reports/eslint-report.json || true

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ci-reports
        path: backend/reports/

    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const coverage = fs.readFileSync('./backend/reports/coverage/coverage-summary.json', 'utf8');
          const data = JSON.parse(coverage);
          const total = data.total;
          const comment = `
          ## Test Coverage Report
          - **Statements**: ${total.statements.pct}%
          - **Branches**: ${total.branches.pct}%
          - **Functions**: ${total.functions.pct}%
          - **Lines**: ${total.lines.pct}%
          `;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  deploy_qa:
    name: Deploy to QA Environment
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: ci-reports
        path: reports/

    - name: Display test coverage
      run: |
        echo "Test coverage report:"
        cat reports/coverage/coverage-summary.json | jq '.'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci --production

    - name: Simulate QA deployment
      run: |
        echo "Deploying to QA environment..."
        echo "Using artifact from CI job:"
        ls -la reports/
        echo "Running health checks..."
        echo "Successfully deployed to QA environment"

    - name: Send QA notification
      if: success()
      run: |
        echo "âœ… QA deployment successful!"
        echo "Environment: QA"
        echo "Branch: dev"

  deploy_prod:
    name: Deploy to Production Environment
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: ci-reports
        path: reports/

    - name: Display test coverage
      run: |
        echo "Test coverage report:"
        cat reports/coverage/coverage-summary.json | jq '.'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci --production

    - name: Simulate Production deployment
      run: |
        echo "ðŸš€ Deploying to PRODUCTION environment..."
        echo "Using artifact from CI job:"
        ls -la reports/
        echo "Running health checks..."
        echo "âœ… Successfully deployed to PRODUCTION environment"

    - name: Send deployment notification
      if: success()
      run: |
        echo "âœ… Production deployment successful!"
        echo "Environment: Production"
        echo "Branch: main"
        echo "Version: ${{ github.sha }}"